/*** Autogenerated by WIDL 1.1.6 from epm.idl - Do not edit ***/
#include "rpc.h"
#include "rpcndr.h"

#ifndef __WIDL_EPM_H
#define __WIDL_EPM_H
#ifdef __cplusplus
extern "C" {
#endif

#include "wtypes.h"
typedef unsigned small unsigned8;
typedef unsigned short unsigned16;
typedef unsigned long unsigned32;
typedef small signed8;
typedef short signed16;
typedef long signed32;
typedef unsigned32 boolean32;
typedef MIDL_uhyper u_int64;
typedef unsigned long u_int32;
typedef unsigned short u_int16;
typedef unsigned small u_int8;
typedef GUID *uuid_p_t;
typedef struct twr_t {
    unsigned32 tower_length;
    byte tower_octet_string[1];
} twr_t;
typedef twr_t *twr_p_t;
typedef struct ndr_context_handle {
    unsigned32 context_handle_attributes;
    GUID context_handle_uuid;
} ndr_context_handle;
#define ndr_c_int_big_endian (0)

#define ndr_c_int_little_endian (1)

#define ndr_c_float_ieee (0)

#define ndr_c_float_vax (1)

#define ndr_c_float_cray (2)

#define ndr_c_float_ibm (3)

#define ndr_c_char_ascii (0)

#define ndr_c_char_ebcdic (1)

typedef struct __WIDL_dcetypes_generated_name_00000000 {
    unsigned8 int_rep;
    unsigned8 char_rep;
    unsigned8 float_rep;
    byte reserved;
} ndr_format_t;
typedef struct __WIDL_dcetypes_generated_name_00000000 *ndr_format_p_t;
typedef struct __WIDL_dcetypes_generated_name_00000001 {
    GUID uuid;
    unsigned16 vers_major;
    unsigned16 vers_minor;
} rpc_if_id_t;
typedef rpc_if_id_t *rpc_if_id_p_t;
typedef struct __WIDL_dcetypes_generated_name_00000002 {
    unsigned32 count;
    rpc_if_id_p_t if_id[1];
} rpc_if_id_vector_t;
typedef rpc_if_id_vector_t *rpc_if_id_vector_p_t;
typedef struct __WIDL_dcetypes_generated_name_00000003 {
    unsigned32 count;
    unsigned32 stats[1];
} rpc_stats_vector_t;
typedef struct __WIDL_dcetypes_generated_name_00000003 *rpc_stats_vector_p_t;
RPC_STATUS WINAPI TowerExplode(
    const twr_t *tower, PRPC_SYNTAX_IDENTIFIER object, PRPC_SYNTAX_IDENTIFIER syntax,
    char **protseq, char **endpoint, char **address);
RPC_STATUS WINAPI TowerConstruct(
    const RPC_SYNTAX_IDENTIFIER *object, const RPC_SYNTAX_IDENTIFIER *syntax,
    const char *protseq, const char *endpoint, const char *address,
    twr_t **tower);
#define ept_max_annotation_size (64)

typedef struct __WIDL_dcetypes_generated_name_00000004 {
    GUID object;
    twr_t *tower;
    char annotation[64];
} ept_entry_t;
typedef struct __WIDL_dcetypes_generated_name_00000004 *ept_entry_p_t;
typedef void *ept_lookup_handle_t;
void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free(void *);

/*****************************************************************************
 * epm interface (v3.0)
 */
#ifndef __epm_INTERFACE_DEFINED__
#define __epm_INTERFACE_DEFINED__

extern RPC_IF_HANDLE epm_v3_0_c_ifspec;
extern RPC_IF_HANDLE epm_v3_0_s_ifspec;
void ept_insert(
    handle_t h,
    unsigned32 num_ents,
    ept_entry_t entries[],
    boolean32 replace,
    error_status_t *status);

void ept_delete(
    handle_t h,
    unsigned32 num_ents,
    ept_entry_t entries[],
    error_status_t *status);

void ept_lookup(
    handle_t h,
    unsigned32 inquiry_type,
    uuid_p_t object,
    rpc_if_id_p_t interface_id,
    unsigned32 vers_option,
    ept_lookup_handle_t *entry_handle,
    unsigned32 max_ents,
    unsigned32 *num_ents,
    ept_entry_t entries[],
    error_status_t *status);

void ept_map(
    handle_t h,
    uuid_p_t object,
    twr_p_t map_tower,
    ept_lookup_handle_t *entry_handle,
    unsigned32 max_towers,
    unsigned32 *num_towers,
    twr_p_t *towers,
    error_status_t *status);

void ept_lookup_handle_free(
    handle_t h,
    ept_lookup_handle_t *entry_handle,
    error_status_t *status);

void ept_inq_object(
    handle_t h,
    GUID *ept_object,
    error_status_t *status);

void ept_mgmt_delete(
    handle_t h,
    boolean32 object_speced,
    uuid_p_t object,
    twr_p_t tower,
    error_status_t *status);


#endif  /* __epm_INTERFACE_DEFINED__ */

/* Begin additional prototypes for all interfaces */

void __RPC_USER ept_lookup_handle_t_rundown(ept_lookup_handle_t);

/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __WIDL_EPM_H */
