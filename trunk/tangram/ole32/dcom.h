/*** Autogenerated by WIDL 1.1.6 from dcom.idl - Do not edit ***/
#include <rpc.h>
#include <rpcndr.h>

#ifndef __WIDL_DCOM_H
#define __WIDL_DCOM_H
#ifdef __cplusplus
extern "C" {
#endif

#include <unknwn.h>
typedef MIDL_uhyper ID;
typedef ID MID;
typedef ID OXID;
typedef ID OID;
typedef ID SETID;
typedef GUID IPID;
typedef GUID CID;
typedef REFGUID REFIPID;
#define COM_MINOR_VERSION_1 (1)

#define COM_MINOR_VERSION_2 (2)

#define COM_MAJOR_VERSION (5)

#define COM_MINOR_VERSION (3)

typedef struct tagCOMVERSION {
    unsigned short MajorVersion;
    unsigned short MinorVersion;
} COMVERSION;
#define ORPCF_NULL (0)

#define ORPCF_LOCAL (1)

#define ORPCF_RESERVED1 (2)

#define ORPCF_RESERVED2 (4)

#define ORPCF_RESERVED3 (8)

#define ORPCF_RESERVED4 (16)

typedef struct tagORPC_EXTENT {
    GUID id;
    unsigned long size;
    byte data[1];
} ORPC_EXTENT;
typedef struct tagORPC_EXTENT_ARRAY {
    unsigned long size;
    unsigned long reserved;
    ORPC_EXTENT **extent;
} ORPC_EXTENT_ARRAY;
typedef struct tagORPCTHIS {
    COMVERSION version;
    unsigned long flags;
    unsigned long reserved1;
    CID cid;
    ORPC_EXTENT_ARRAY *extensions;
} ORPCTHIS;
typedef struct tagORPCTHAT {
    unsigned long flags;
    ORPC_EXTENT_ARRAY *extensions;
} ORPCTHAT;
#define NCADG_IP_UDP (0x8)

#define NCACN_IP_TCP (0x7)

#define NCADG_IPX (0xe)

#define NCACN_SPX (0xc)

#define NCACN_NB_NB (0x12)

#define NCACN_NB_IPX (0xd)

#define NCACN_DNET_NSP (0x4)

#define NCACN_HTTP (0x1f)

typedef struct tagSTRINGBINDING {
    unsigned short wTowerId;
    WCHAR aNetworkAddr[1];
} STRINGBINDING;
#define COM_C_AUTHZ_NONE (0xffff)

typedef struct tagSECURITYBINDING {
    unsigned short wAuthnSvc;
    unsigned short wAuthzSvc;
    WCHAR aPrincName[1];
} SECURITYBINDING;
typedef struct tagDUALSTRINGARRAY {
    unsigned short wNumEntries;
    unsigned short wSecurityOffset;
    unsigned short aStringArray[1];
} DUALSTRINGARRAY;
typedef struct tagOXID_INFO {
    DWORD dwTid;
    DWORD dwPid;
    IPID ipidRemUnknown;
    DWORD dwAuthnHint;
    DUALSTRINGARRAY *psa;
} OXID_INFO;
#define OBJREF_SIGNATURE (0x574f454d)

#define OBJREF_STANDARD (0x1)

#define OBJREF_HANDLER (0x2)

#define OBJREF_CUSTOM (0x4)

#define SORF_OXRES1 (0x1)

#define SORF_OXRES2 (0x20)

#define SORF_OXRES3 (0x40)

#define SORF_OXRES4 (0x80)

#define SORF_OXRES5 (0x100)

#define SORF_OXRES6 (0x200)

#define SORF_OXRES7 (0x400)

#define SORF_OXRES8 (0x800)

#define SORF_NULL (0x0)

#define SORF_NOPING (0x1000)

typedef struct tagSTDOBJREF {
    unsigned long flags;
    unsigned long cPublicRefs;
    OXID oxid;
    OID oid;
    IPID ipid;
} STDOBJREF;
typedef struct tagOBJREF {
    unsigned long signature;
    unsigned long flags;
    GUID iid;
    union {
        struct OR_STANDARD {
            STDOBJREF std;
            DUALSTRINGARRAY saResAddr;
        } u_standard;
        struct OR_HANDLER {
            STDOBJREF std;
            CLSID clsid;
            DUALSTRINGARRAY saResAddr;
        } u_handler;
        struct OR_CUSTOM {
            CLSID clsid;
            unsigned long cbExtension;
            ULONG size;
            byte *pData;
        } u_custom;
    } u_objref;
} OBJREF;
typedef struct tagMInterfacePointer {
    ULONG ulCntData;
    BYTE abData[1];
} MInterfacePointer;
typedef MInterfacePointer *PMInterfacePointer;
void * __RPC_USER MIDL_user_allocate(size_t);
void __RPC_USER MIDL_user_free(void *);

/*****************************************************************************
 * ObjectRpcBaseTypes interface (v0.0)
 */
#ifndef __ObjectRpcBaseTypes_INTERFACE_DEFINED__
#define __ObjectRpcBaseTypes_INTERFACE_DEFINED__

extern RPC_IF_HANDLE ObjectRpcBaseTypes_v0_0_c_ifspec;
extern RPC_IF_HANDLE ObjectRpcBaseTypes_v0_0_s_ifspec;

#endif  /* __ObjectRpcBaseTypes_INTERFACE_DEFINED__ */

#ifndef __IRemUnknown_FWD_DEFINED__
#define __IRemUnknown_FWD_DEFINED__
typedef interface IRemUnknown IRemUnknown;
#endif

typedef IRemUnknown *LPREMUNKNOWN;
typedef struct tagREMQIRESULT {
    HRESULT hResult;
    STDOBJREF std;
} REMQIRESULT;
typedef struct tagREMINTERFACEREF {
    IPID ipid;
    unsigned long cPublicRefs;
    unsigned long cPrivateRefs;
} REMINTERFACEREF;
/*****************************************************************************
 * IRemUnknown interface
 */
#ifndef __IRemUnknown_INTERFACE_DEFINED__
#define __IRemUnknown_INTERFACE_DEFINED__

DEFINE_GUID(IID_IRemUnknown, 0x00000131, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46);
#if defined(__cplusplus) && !defined(CINTERFACE)
interface IRemUnknown : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE RemQueryInterface(
        REFIPID ripid,
        ULONG cRefs,
        unsigned short cIids,
        IID *iids,
        REMQIRESULT **ppQIResults) = 0;

    virtual HRESULT STDMETHODCALLTYPE RemAddRef(
        unsigned short cInterfaceRefs,
        REMINTERFACEREF *InterfaceRefs,
        HRESULT *pResults) = 0;

    virtual HRESULT STDMETHODCALLTYPE RemRelease(
        unsigned short cInterfaceRefs,
        REMINTERFACEREF *InterfaceRefs) = 0;

};
#else
typedef struct IRemUnknownVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IRemUnknown* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IRemUnknown* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IRemUnknown* This);

    /*** IRemUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *RemQueryInterface)(
        IRemUnknown* This,
        REFIPID ripid,
        ULONG cRefs,
        unsigned short cIids,
        IID *iids,
        REMQIRESULT **ppQIResults);

    HRESULT (STDMETHODCALLTYPE *RemAddRef)(
        IRemUnknown* This,
        unsigned short cInterfaceRefs,
        REMINTERFACEREF *InterfaceRefs,
        HRESULT *pResults);

    HRESULT (STDMETHODCALLTYPE *RemRelease)(
        IRemUnknown* This,
        unsigned short cInterfaceRefs,
        REMINTERFACEREF *InterfaceRefs);

    END_INTERFACE
} IRemUnknownVtbl;
interface IRemUnknown {
    CONST_VTBL IRemUnknownVtbl* lpVtbl;
};

#ifdef COBJMACROS
/*** IUnknown methods ***/
#define IRemUnknown_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IRemUnknown_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IRemUnknown_Release(This) (This)->lpVtbl->Release(This)
/*** IRemUnknown methods ***/
#define IRemUnknown_RemQueryInterface(This,ripid,cRefs,cIids,iids,ppQIResults) (This)->lpVtbl->RemQueryInterface(This,ripid,cRefs,cIids,iids,ppQIResults)
#define IRemUnknown_RemAddRef(This,cInterfaceRefs,InterfaceRefs,pResults) (This)->lpVtbl->RemAddRef(This,cInterfaceRefs,InterfaceRefs,pResults)
#define IRemUnknown_RemRelease(This,cInterfaceRefs,InterfaceRefs) (This)->lpVtbl->RemRelease(This,cInterfaceRefs,InterfaceRefs)
#endif

#endif

HRESULT STDMETHODCALLTYPE IRemUnknown_RemQueryInterface_Proxy(
    IRemUnknown* This,
    REFIPID ripid,
    ULONG cRefs,
    unsigned short cIids,
    IID *iids,
    REMQIRESULT **ppQIResults);
void __RPC_STUB IRemUnknown_RemQueryInterface_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IRemUnknown_RemAddRef_Proxy(
    IRemUnknown* This,
    unsigned short cInterfaceRefs,
    REMINTERFACEREF *InterfaceRefs,
    HRESULT *pResults);
void __RPC_STUB IRemUnknown_RemAddRef_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IRemUnknown_RemRelease_Proxy(
    IRemUnknown* This,
    unsigned short cInterfaceRefs,
    REMINTERFACEREF *InterfaceRefs);
void __RPC_STUB IRemUnknown_RemRelease_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IRemUnknown_INTERFACE_DEFINED__ */

#ifndef __IRemUnknown2_FWD_DEFINED__
#define __IRemUnknown2_FWD_DEFINED__
typedef interface IRemUnknown2 IRemUnknown2;
#endif

typedef IRemUnknown2 *LPREMUNKNOWN2;
/*****************************************************************************
 * IRemUnknown2 interface
 */
#ifndef __IRemUnknown2_INTERFACE_DEFINED__
#define __IRemUnknown2_INTERFACE_DEFINED__

DEFINE_GUID(IID_IRemUnknown2, 0x00000142, 0x0000, 0x0000, 0xc0,0x00, 0x00,0x00,0x00,0x00,0x00,0x46);
#if defined(__cplusplus) && !defined(CINTERFACE)
interface IRemUnknown2 : public IRemUnknown
{
    virtual HRESULT STDMETHODCALLTYPE RemQueryInterface2(
        REFIPID ripid,
        unsigned short cIids,
        IID *iids,
        HRESULT *phr,
        MInterfacePointer **ppMIF) = 0;

};
#else
typedef struct IRemUnknown2Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IRemUnknown2* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IRemUnknown2* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IRemUnknown2* This);

    /*** IRemUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *RemQueryInterface)(
        IRemUnknown2* This,
        REFIPID ripid,
        ULONG cRefs,
        unsigned short cIids,
        IID *iids,
        REMQIRESULT **ppQIResults);

    HRESULT (STDMETHODCALLTYPE *RemAddRef)(
        IRemUnknown2* This,
        unsigned short cInterfaceRefs,
        REMINTERFACEREF *InterfaceRefs,
        HRESULT *pResults);

    HRESULT (STDMETHODCALLTYPE *RemRelease)(
        IRemUnknown2* This,
        unsigned short cInterfaceRefs,
        REMINTERFACEREF *InterfaceRefs);

    /*** IRemUnknown2 methods ***/
    HRESULT (STDMETHODCALLTYPE *RemQueryInterface2)(
        IRemUnknown2* This,
        REFIPID ripid,
        unsigned short cIids,
        IID *iids,
        HRESULT *phr,
        MInterfacePointer **ppMIF);

    END_INTERFACE
} IRemUnknown2Vtbl;
interface IRemUnknown2 {
    CONST_VTBL IRemUnknown2Vtbl* lpVtbl;
};

#ifdef COBJMACROS
/*** IUnknown methods ***/
#define IRemUnknown2_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IRemUnknown2_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IRemUnknown2_Release(This) (This)->lpVtbl->Release(This)
/*** IRemUnknown methods ***/
#define IRemUnknown2_RemQueryInterface(This,ripid,cRefs,cIids,iids,ppQIResults) (This)->lpVtbl->RemQueryInterface(This,ripid,cRefs,cIids,iids,ppQIResults)
#define IRemUnknown2_RemAddRef(This,cInterfaceRefs,InterfaceRefs,pResults) (This)->lpVtbl->RemAddRef(This,cInterfaceRefs,InterfaceRefs,pResults)
#define IRemUnknown2_RemRelease(This,cInterfaceRefs,InterfaceRefs) (This)->lpVtbl->RemRelease(This,cInterfaceRefs,InterfaceRefs)
/*** IRemUnknown2 methods ***/
#define IRemUnknown2_RemQueryInterface2(This,ripid,cIids,iids,phr,ppMIF) (This)->lpVtbl->RemQueryInterface2(This,ripid,cIids,iids,phr,ppMIF)
#endif

#endif

HRESULT STDMETHODCALLTYPE IRemUnknown2_RemQueryInterface2_Proxy(
    IRemUnknown2* This,
    REFIPID ripid,
    unsigned short cIids,
    IID *iids,
    HRESULT *phr,
    MInterfacePointer **ppMIF);
void __RPC_STUB IRemUnknown2_RemQueryInterface2_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IRemUnknown2_INTERFACE_DEFINED__ */

/*****************************************************************************
 * IOXIDResolver interface (v0.0)
 */
#ifndef __IOXIDResolver_INTERFACE_DEFINED__
#define __IOXIDResolver_INTERFACE_DEFINED__

extern RPC_IF_HANDLE IOXIDResolver_v0_0_c_ifspec;
extern RPC_IF_HANDLE IOXIDResolver_v0_0_s_ifspec;
error_status_t ResolveOxid(
    handle_t hRpc,
    OXID *pOxid,
    unsigned short cRequestedProtseqs,
    unsigned short arRequestedProtseqs[],
    DUALSTRINGARRAY **ppdsaOxidBindings,
    IPID *pipidRemUnknown,
    DWORD *pAuthnHint);

error_status_t SimplePing(
    handle_t hRpc,
    SETID *pSetId);

error_status_t ComplexPing(
    handle_t hRpc,
    SETID *pSetId,
    unsigned short SequenceNum,
    unsigned short cAddToSet,
    unsigned short cDelFromSet,
    OID AddToSet[],
    OID DelFromSet[],
    unsigned short *pPingBackoffFactor);

error_status_t ServerAlive(
    handle_t hRpc);

error_status_t ResolveOxid2(
    handle_t hRpc,
    OXID *pOxid,
    unsigned short cRequestedProtseqs,
    unsigned short arRequestedProtseqs[],
    DUALSTRINGARRAY **ppdsaOxidBindings,
    IPID *pipidRemUnknown,
    DWORD *pAuthnHint,
    COMVERSION *pComVersion);


#endif  /* __IOXIDResolver_INTERFACE_DEFINED__ */

#define MODE_GET_CLASS_OBJECT (0xffffffff)

/*****************************************************************************
 * IRemoteActivation interface (v0.0)
 */
#ifndef __IRemoteActivation_INTERFACE_DEFINED__
#define __IRemoteActivation_INTERFACE_DEFINED__

extern RPC_IF_HANDLE IRemoteActivation_v0_0_c_ifspec;
extern RPC_IF_HANDLE IRemoteActivation_v0_0_s_ifspec;
HRESULT RemoteActivation(
    handle_t hRpc,
    ORPCTHIS *ORPCthis,
    ORPCTHAT *ORPCthat,
    GUID *Clsid,
    WCHAR *pwszObjectName,
    MInterfacePointer *pObjectStorage,
    DWORD ClientImpLevel,
    DWORD Mode,
    DWORD Interfaces,
    IID *pIIDs,
    unsigned short cRequestedProtseqs,
    unsigned short RequestedProtseqs[],
    OXID *pOxid,
    DUALSTRINGARRAY **ppdsaOxidBindings,
    IPID *pipidRemUnknown,
    DWORD *pAuthnHint,
    COMVERSION *pServerVersion,
    HRESULT *phr,
    MInterfacePointer **ppInterfaceData,
    HRESULT *pResults);


#endif  /* __IRemoteActivation_INTERFACE_DEFINED__ */

/* Begin additional prototypes for all interfaces */


/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __WIDL_DCOM_H */
